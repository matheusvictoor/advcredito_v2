generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- Enumerations ---- //

enum ActionType {
  CREATE @map("create")
  UPDATE @map("update")
  DELETE @map("delete")
}

enum ActorType {
  API          @map("api")
  COLLABORATOR @map("collaborator")
  LANDLORD     @map("landlord")
  MEMBER       @map("member") // talvez seja necessario remover posteriormente
  SYSTEM       @map("system")
}

enum ContactRecord {
  PERSON  @map("person")
  COMPANY @map("company")
}

enum ContactStage {
  LEAD           @map("lead")
  QUALIFIED      @map("qualified")
  OPPORTUNITY    @map("opportunity")
  PROPOSAL       @map("proposal")
  IN_NEGOTIATION @map("inNegotiation")
  LOST           @map("lost")
  WON            @map("won")
}

enum ContactTaskStatus {
  OPEN      @map("open")
  COMPLETED @map("completed")
}

enum ChargeType {
  IPTU           @map("iptu")
  WATER          @map("water")
  LIGHT          @map("light")
  GAS            @map("map")
  CONDOMINIUM    @map("condominium")
  INSURANCE_FIRE @map("insuranceFire")
  OTHER          @map("other")
}

enum DayOfWeek {
  SUNDAY    @map("sunday")
  MONDAY    @map("monday")
  TUESDAY   @map("tuesday")
  WEDNESDAY @map("wednesday")
  THURSDAY  @map("thursday")
  FRIDAY    @map("friday")
  SATURDAY  @map("saturday")
}

enum FeedbackCategory {
  SUGGESTION @map("suggestion")
  PROBLEM    @map("problem")
  QUESTION   @map("question")
}

enum InvitationStatus {
  PENDING  @map("pending")
  ACCEPTED @map("accepted")
  REVOKED  @map("revoked")
}

enum LandlordRecord {
  PERSON  @map("person")
  COMPANY @map("company")
}

enum PropertyUse {
  RESIDENTIAL  @map("residential")
  COMMERCIAL   @map("commercial")
  INDUSTRIAL   @map("industrial")
  RURAL        @map("rural")
  AGRICULTURAL @map("agricultural")
  GOVERNMENT   @map("government")
  OTHER        @map("other")

  @@map("PropertyUse")
}

enum PropertyType {
  APARTMENT          @map("apartment")
  ATTIC              @map("attic")
  BUILDING           @map("building")
  CHALET             @map("chalet")
  COMMERCIAL_SPACE   @map("commercialSpace")
  CONDOMINIUM        @map("condominium")
  COUNTRY_HOUSE      @map("countryHouse")
  FARM               @map("farm")
  GARAGE             @map("garage")
  HOLIDAY_HOME       @map("holidayHome")
  HOUSE              @map("house")
  HOTEL              @map("hotel")
  KITNETTE           @map("kitnette")
  LAND               @map("land")
  LIVING_ROOM        @map("livingRoom")
  LOFT               @map("loft")
  LOT                @map("lot")
  MOTORHOME          @map("motorhome")
  OFFICE             @map("office")
  OTHER              @map("other")
  PARKING            @map("parking")
  ROOM               @map("room")
  SHARED_OFFICE      @map("sharedOffice")
  STORE              @map("store")
  STUDIO             @map("studio")
  VILLA              @map("villa")
  WAREHOUSE          @map("warehouse")
  WAREHOUSE_BUILDING @map("warehouseBuilding")
}

enum PaymentType {
  BILLET   @map("billet")
  PIX      @map("pix")
  CASH     @map("cash")
  TRANSFER @map("transfer")
}

enum Role {
  MEMBER @map("member")
  ADMIN  @map("admin")
}

enum ContractualPeriod {
  ANNUAL      @map("annual")
  DAILY       @map("daily")
  FORTNIGHTLY @map("fortnightly")
  MONTHLY     @map("monthly")
  SEASONAL    @map("seasonal")
  WEEKLY      @map("weekly")

  @@map("ConractType")
}

enum StatusContract {
  ACTIVE   @map("active")
  CANCELED @map("canceled")
  FINISHED @map("finished")
}

enum StatusProperty {
  ACTIVE             @map("active")
  BUILDING           @map("building")
  INACTIVE           @map("inactive")
  OCCUPIED           @map("occupied")
  RENTED             @map("rented")
  RESERVED           @map("reserved")
  SOLD               @map("sold")
  UNDER_CONSTRUCTION @map("underConstruction")
}

enum StatusSubscription {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
}

enum StatusTransation {
  CANCELED @map("canceled")
  PAID     @map("paid")
  PENDING  @map("pending")
}

enum TenantRecord {
  PERSON  @map("person")
  COMPANY @map("company")
}

enum TransationType {
  CREDIT   @map("credit")
  RENT     @map("rent")
  INTEREST @map("interest")
  FINE     @map("fine")
}

enum TenantTaskStatus {
  OPEN      @map("open")
  COMPLETED @map("completed")
}

enum WebhookTrigger {
  CONTACT_CREATED @map("contactCreated")
  CONTACT_UPDATED @map("contactUpdated")
  CONTACT_DELETED @map("contactDeleted")
}

// ---- Models ---- //

model Account {
  id                String   @id(map: "PK_Account") @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "IX_Account_userId")
}

model ApiKey {
  id             String       @id(map: "PK_ApiKey") @default(uuid()) @db.Uuid
  organizationId String       @db.Uuid
  description    String       @db.VarChar()
  hashedKey      String       @unique()
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([organizationId], map: "IX_ApiKey_organizationId")
}

model AuthenticatorApp {
  id            String   @id(map: "PK_AuthenticatorApp") @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  accountName   String   @db.VarChar(255)
  issuer        String   @db.VarChar(255)
  secret        String   @db.VarChar(255)
  recoveryCodes String   @db.VarChar(1024)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "IX_AuthenticatorApp_userId")
}

model ChangeEmailRequest {
  id        String   @id(map: "PK_ChangeEmailRequest") @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  email     String
  expires   DateTime
  valid     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "IX_ChangeEmailRequest_userId")
}

model Contact {
  id             String             @id(map: "PK_Contact") @default(uuid()) @db.Uuid
  organizationId String             @db.Uuid
  record         ContactRecord      @default(PERSON)
  image          String?            @db.VarChar(2048)
  name           String             @db.VarChar(255)
  email          String?            @db.VarChar(255)
  address        String?            @db.VarChar(255)
  phone          String?            @db.VarChar(32)
  stage          ContactStage       @default(LEAD)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activities     ContactActivity[]
  comments       ContactComment[]
  notes          ContactNote[]
  pageVisits     ContactPageVisit[]
  tags           ContactTag[]
  // favorites      Favorite[]
  tasks          ContactTask[]

  @@index([organizationId], map: "IX_Contact_organizationId")
}

model ContactActivity {
  id         String     @id(map: "PK_ContactActivity") @default(uuid()) @db.Uuid
  contactId  String     @db.Uuid
  actionType ActionType
  actorId    String     @db.VarChar(255)
  actorType  ActorType
  metadata   Json?
  occurredAt DateTime   @default(now())
  contact    Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([contactId], map: "IX_ContactActivity_contactId")
  @@index([occurredAt], map: "IX_ContactActivity_occurredAt")
}

model ContactComment {
  id        String   @id(map: "PK_ContactComment") @default(uuid()) @db.Uuid
  contactId String   @db.Uuid
  userId    String   @db.Uuid
  text      String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([contactId], map: "IX_ContactComment_contactId")
  @@index([userId], map: "IX_ContactComment_userId")
}

model ContactImage {
  id          String  @id(map: "PK_ContactImage") @default(uuid()) @db.Uuid
  contactId   String  @db.Uuid
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)

  @@index([contactId], map: "IX_ContactImage_contactId")
}

model ContactNote {
  id        String   @id(map: "PK_ContactNote") @default(uuid()) @db.Uuid
  contactId String   @db.Uuid
  userId    String   @db.Uuid
  text      String?  @db.VarChar(8000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([contactId], map: "IX_ContactNote_contactId")
  @@index([userId], map: "IX_ContactNote_userId")
}

model ContactPageVisit {
  id        String   @id(map: "PK_ContactPageVisit") @default(uuid()) @db.Uuid
  contactId String   @db.Uuid
  userId    String?  @db.Uuid
  timestamp DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([contactId], map: "IX_ContactPageVisit_contactId")
  @@index([userId], map: "IX_ContactPageVisit_userId")
}

model ContactTag {
  id       String    @id(map: "PK_ContactTag") @default(uuid()) @db.Uuid
  text     String    @unique @db.VarChar(128)
  contacts Contact[]
}

model ContactTask {
  id          String            @id(map: "PK_ContactTask") @default(uuid()) @db.Uuid
  contactId   String            @db.Uuid
  title       String            @db.VarChar(255)
  description String?           @db.VarChar(8000)
  status      ContactTaskStatus @default(OPEN)
  dueDate     DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  contact     Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([contactId], map: "IX_ContactTask_contactId")
}

model Favorite {
  id       String @id(map: "PK_Favorite") @default(uuid()) @db.Uuid
  userId   String @db.Uuid
  tenantId String @db.Uuid
  order    Int    @default(0)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "IX_Favorite_userId")
  @@index([tenantId], map: "IX_Favorite_tenantId")
}

model Feedback {
  id             String           @id(map: "PK_Feedback") @default(uuid()) @db.Uuid
  organizationId String           @db.Uuid
  userId         String?          @db.Uuid
  category       FeedbackCategory @default(SUGGESTION)
  message        String           @db.VarChar(4000)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([organizationId], map: "IX_Feedback_organizationId")
  @@index([userId], map: "IX_Feedback_userId")
}

model Invitation {
  id             String           @id(map: "PK_Invitation") @default(uuid()) @db.Uuid
  organizationId String           @db.Uuid
  token          String           @default(uuid()) @db.Uuid
  email          String           @db.VarChar(255)
  role           Role             @default(MEMBER)
  status         InvitationStatus @default(PENDING)
  lastSentAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([organizationId], map: "IX_Invitation_organizationId")
  @@index([token], map: "IX_Invitation_token")
}

model Membership {
  id             String       @id(map: "PK_Membership") @default(uuid()) @db.Uuid
  organizationId String       @db.Uuid
  userId         String       @db.Uuid
  role           Role         @default(MEMBER)
  isLandlord     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([organizationId, userId])
}

model Notification {
  id        String    @id(map: "PK_Notification") @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  subject   String?   @db.VarChar(128)
  content   String    @db.VarChar(8000)
  link      String?   @db.VarChar(2000)
  seenAt    DateTime?
  dismissed Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId], map: "IX_Notification_userId")
}

model Organization {
  id               String       @id(map: "PK_Organization") @default(uuid()) @db.Uuid
  stripeCustomerId String
  slug             String       @unique @db.VarChar(255)
  logo             String?      @db.VarChar(2048)
  name             String       @db.VarChar(255)
  address          String?      @db.VarChar(255)
  phone            String?      @db.VarChar(32)
  email            String?      @db.VarChar(255)
  website          String?      @db.VarChar(2000)
  linkedInProfile  String?      @db.VarChar(2000)
  instagramProfile String?      @db.VarChar(2000)
  youTubeChannel   String?      @db.VarChar(2000)
  xProfile         String?      @db.VarChar(2000)
  tikTokProfile    String?      @db.VarChar(2000)
  facebookPage     String?      @db.VarChar(2000)
  tier             String       @default("free") @db.VarChar(255)
  apiKeys          ApiKey[]
  businessHours    WorkHours[]
  contacts         Contact[]
  feedback         Feedback[]
  invitations      Invitation[]
  memberships      Membership[]
  webhooks         Webhook[]
  tenants          Tenant[]

  @@index([stripeCustomerId], map: "IX_Organization_stripeCustomerId")
}

model OrganizationLogo {
  id             String  @id(map: "PK_OrganizationLogo") @default(uuid()) @db.Uuid
  organizationId String  @db.Uuid
  data           Bytes?
  contentType    String? @db.VarChar(255)
  hash           String? @db.VarChar(64)

  @@index([organizationId], map: "IX_OrganizationLogo_organizationId")
}

model ResetPasswordRequest {
  id        String   @id(map: "PK_ResetPasswordRequest") @default(uuid()) @db.Uuid
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], map: "IX_ResetPasswordRequest_email")
}

model Session {
  id           String   @id(map: "PK_Session") @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId], map: "IX_Session_userId")
}

model User {
  id                           String               @id(map: "PK_User") @default(uuid()) @db.Uuid
  image                        String?              @db.VarChar(2048)
  name                         String               @db.VarChar(64)
  email                        String?              @unique
  emailVerified                DateTime?
  password                     String?              @db.VarChar(60)
  lastLogin                    DateTime?
  phone                        String?              @db.VarChar(32)
  locale                       String               @default("pt-BR") @db.VarChar(8)
  role                         Role                 @default(MEMBER)
  completedOnboarding          Boolean              @default(false)
  enabledContactsNotifications Boolean              @default(false)
  enabledInboxNotifications    Boolean              @default(false)
  enabledWeeklySummary         Boolean              @default(false)
  enabledNewsletter            Boolean              @default(false)
  enabledProductUpdates        Boolean              @default(false)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  accounts                     Account[]
  authenticatorApp             AuthenticatorApp?
  changeEmailRequests          ChangeEmailRequest[]
  comments                     TenantComment[]
  favorites                    Favorite[]
  feedback                     Feedback[]
  notes                        TenantNote[]
  memberships                  Membership[]
  notifications                Notification[]
  pageVisits                   TenantPageVisit[]
  sessions                     Session[]
  contracts                    Contract[]
}

model UserImage {
  id          String  @id(map: "PK_UserImage") @default(uuid()) @db.Uuid
  userId      String  @db.Uuid
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)

  @@index([userId], map: "IX_UserImage_userId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Webhook {
  id             String           @id(map: "PK_Webhook") @default(uuid()) @db.Uuid
  organizationId String           @db.Uuid
  url            String           @db.VarChar(2000)
  triggers       WebhookTrigger[]
  secret         String?          @db.VarChar(1024)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId], map: "IX_Webhook_organizationId")
}

model WorkHours {
  id             String         @id(map: "PK_WorkHours") @default(uuid()) @db.Uuid
  organizationId String         @db.Uuid
  dayOfWeek      DayOfWeek      @default(SUNDAY)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timeSlots      WorkTimeSlot[]

  @@index([organizationId], map: "IX_WorkHours_organizationId")
}

model WorkTimeSlot {
  id          String    @id(map: "PK_WorkTimeSlot") @default(uuid()) @db.Uuid
  workHoursId String    @db.Uuid
  start       DateTime  @db.Time(0)
  end         DateTime  @db.Time(0)
  workHours   WorkHours @relation(fields: [workHoursId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([workHoursId], map: "IX_WorkTimeSlot_workHoursId")
}

model Actor {
  id            String    @id(map: "PK_Actor") @default(uuid()) @db.Uuid
  image         String?   @db.VarChar(2048)
  name          String    @db.VarChar(64)
  cpf           String    @unique @db.VarChar(11)
  phone         String?   @db.VarChar(11)
  email         String    @unique @db.VarChar(64)
  emailVerified DateTime?
  password      String    @db.VarChar(64)
  lastLogin     DateTime?
  role          Role      @default(MEMBER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // contracts     Contract[]
  // pageVisits    TenantPageVisit[]
  // comments      TenantComment[]
  // notes         TenantNote[]
}

model Charge {
  id          String     @id(map: "PK_Charge") @default(uuid()) @db.Uuid
  contractId  String     @db.Uuid
  propertyId  String     @db.Uuid
  value       Decimal    @default("0.00") @db.Decimal(8, 2)
  type        ChargeType @default(OTHER)
  due         DateTime?
  description String?    @db.VarChar(128)
  contract    Contract   @relation(fields: [contractId], references: [id])
  property    Property   @relation(fields: [propertyId], references: [id])

  @@index([contractId])
}

model Contract {
  id             String @id(map: "PK_Contract") @default(uuid()) @db.Uuid
  userId         String @db.Uuid
  tenantId       String @db.Uuid
  propertyId     String @db.Uuid
  subscriptionId String @unique @db.Uuid

  startContract DateTime       @default(now())
  endContract   DateTime
  rental        Decimal        @default("0.00") @db.Decimal(10, 2)
  furnished     Boolean        @default(false)
  dueRental     DateTime
  totalCharges  Decimal        @default("0.00") @db.Decimal(8, 2)
  floor         Int?           @db.Integer
  paymentType   PaymentType    @default(BILLET)
  propertyType  PropertyType   @default(HOUSE)
  propertyUse   PropertyUse    @default(RESIDENTIAL)
  status        StatusContract @default(ACTIVE)
  forumCity     String         @db.VarChar(64)
  observation   String?        @db.VarChar(255)

  p_street       String  @db.VarChar(64)
  p_number       String  @db.VarChar(10)
  p_neighborhood String  @db.VarChar(64)
  p_zipcode      String  @db.VarChar(10)
  p_city         String  @db.VarChar(64)
  p_state        String  @db.VarChar(2)
  p_country      String  @default("Brasil") @db.VarChar(32)
  p_complement   String? @db.VarChar(255)

  l_name         String  @db.VarChar(64)
  l_doc          String  @db.VarChar(14)
  l_email        String? @db.VarChar(64)
  l_phone        String? @db.VarChar(11)
  l_street       String  @db.VarChar(64)
  l_number       String  @db.VarChar(10)
  l_neighborhood String  @db.VarChar(64)
  l_zipcode      String  @db.VarChar(10)
  l_city         String  @db.VarChar(64)
  l_state        String  @db.VarChar(2)
  l_country      String  @default("Brasil") @db.VarChar(32)
  l_complement   String? @db.VarChar(255)

  t_name         String  @db.VarChar(64)
  t_doc          String  @db.VarChar(14)
  t_email        String  @db.VarChar(64)
  t_phone        String  @db.VarChar(11)
  t_street       String? @db.VarChar(64)
  t_number       String? @db.VarChar(10)
  t_neighborhood String? @db.VarChar(64)
  t_zipcode      String? @db.VarChar(10)
  t_city         String? @db.VarChar(64)
  t_state        String? @db.VarChar(2)
  t_country      String? @default("Brasil") @db.VarChar(32)
  t_complement   String? @db.VarChar(255)

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  tenant       Tenant       @relation(fields: [tenantId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  property     Property     @relation(fields: [propertyId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  charges      Charge[]
  payments     Payment[]

  @@index([tenantId], map: "IX_Contract_tenantId")
  @@index([propertyId], map: "IX_Contract_propertyId")
  @@map("Contract")
}

model Landlord {
  id              String           @id(map: "PK_Landlord") @default(uuid()) @db.Uuid
  slug            String           @unique @db.VarChar(21)
  image           String?          @db.VarChar(2048)
  record          LandlordRecord   @default(PERSON)
  name            String           @db.VarChar(64)
  email           String           @unique @db.VarChar(64)
  phone           String           @unique @db.VarChar(11)
  archived        Boolean          @default(false)
  street          String?          @db.VarChar(64)
  number          String?          @db.VarChar(10)
  neighborhood    String?          @db.VarChar(64)
  zipcode         String?          @db.VarChar(10)
  city            String?          @db.VarChar(64)
  complement      String?          @db.VarChar(255)
  state           String?          @db.VarChar(2)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  LandlordImage   LandlordImage?
  LandlordPerson  LandlordPerson?
  LandlordCompany LandlordCompany?
  propertys       Property[]
}

model LandlordImage {
  landlordId  String   @id(map: "PK_LandlordImage") @default(uuid()) @db.Uuid
  data        Bytes?
  contentType String?  @db.VarChar(255)
  hash        String?  @db.VarChar(64)
  landlord    Landlord @relation(fields: [landlordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model LandlordPerson {
  landlordId String   @id(map: "PK_LandlordPerson") @default(uuid()) @db.Uuid
  cpf        String   @unique @db.VarChar(11)
  dateBirth  DateTime
  landlord   Landlord @relation(fields: [landlordId], references: [id], onDelete: Cascade)

  @@index([cpf], map: "IX_LandlordPerson_cpf")
}

model LandlordCompany {
  landlordId String   @id(map: "PK_LandlordCompany") @default(uuid()) @db.Uuid
  cnpj       String   @unique @db.VarChar(14)
  landlord   Landlord @relation(fields: [landlordId], references: [id], onDelete: Cascade)

  @@index([cnpj], map: "IX_LandlordCompany_cnpj")
}

model Property {
  id                String            @id(map: "PK_Property") @default(uuid()) @db.Uuid
  landlordId        String            @db.Uuid
  street            String            @db.VarChar(64)
  number            String            @db.VarChar(10)
  neighborhood      String            @db.VarChar(64)
  complement        String?           @db.VarChar(255)
  zipcode           String            @db.VarChar(10)
  city              String            @db.VarChar(64)
  state             String            @db.VarChar(2)
  floor             Int?              @db.Integer
  aptNumber         String?           @db.VarChar(10)
  propertyType      PropertyType      @default(HOUSE)
  propertyUse       PropertyUse       @default(RESIDENTIAL)
  category          PropertyUse       @default(RESIDENTIAL)
  contractualPeriod ContractualPeriod @default(ANNUAL)
  furnished         Boolean           @default(false)
  nRoom             Int?              @db.Integer
  nSuite            Int?              @db.Integer
  nBathroom         Int?              @db.Integer
  parkingSpaces     Int?              @db.Integer
  areaLand          Float?
  areaBuild         Float?
  canAnimal         Boolean           @default(false)
  observation       String?           @db.VarChar(255)
  propertyValue     Decimal?          @default("0.00") @db.Decimal(10, 2)
  rental            Decimal?          @default("0.00") @db.Decimal(10, 2)
  status            StatusProperty    @default(ACTIVE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  charges           Charge[]
  contract          Contract[]
  landlord          Landlord          @relation(fields: [landlordId], references: [id])
}

model Plan {
  id            Int            @id(map: "PK_Plan") @default(autoincrement()) @db.Integer
  name          String         @db.VarChar(64)
  interval      Int            @db.Integer
  amount        Decimal        @default("0.00") @db.Decimal(8, 2)
  repetition    Int? //null para que seja gerado indefinidamente
  creadedAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Payment {
  id          String           @id(map: "PK_Payment") @default(uuid()) @db.Uuid
  tenantId    String           @db.Uuid
  contractId  String           @db.Uuid
  type        TransationType   @default(RENT)
  status      StatusTransation @default(PENDING)
  description String?          @db.VarChar(255)
  amount      Decimal          @default("0.00") @db.Decimal(8, 2)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  tenant      Tenant           @relation(fields: [tenantId], references: [id])
  rental      Contract?        @relation(fields: [contractId], references: [id])

  @@index([tenantId], map: "IX_Payment_tenantId")
}

model Subscription {
  id          String             @id(map: "PK_Subscription") @default(uuid()) @db.Uuid
  planId      Int                @db.Integer
  tenantId    String             @db.Uuid
  status      StatusSubscription @default(ACTIVE)
  description String?            @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  plan        Plan               @relation(fields: [planId], references: [id])
  tenant      Tenant             @relation(fields: [tenantId], references: [id])
  rental      Contract?
}

model Tenant {
  id             String            @id(map: "PK_Tenant") @default(uuid()) @db.Uuid
  organizationId String?           @db.Uuid
  record         TenantRecord      @default(PERSON)
  name           String            @db.VarChar(64)
  image          String?           @db.VarChar(2048)
  email          String?           @unique @db.VarChar(64)
  phone          String?           @unique @db.VarChar(11)
  status         InvitationStatus  @default(PENDING)
  archived       Boolean           @default(false)
  solde          Decimal           @default("0.00") @db.Decimal(10, 2)
  street         String?           @db.VarChar(64)
  number         String?           @db.VarChar(10)
  neighborhood   String?           @db.VarChar(64)
  zipcode        String?           @db.VarChar(10)
  city           String?           @db.VarChar(64)
  complement     String?           @db.VarChar(255)
  state          String?           @db.VarChar(2)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  organization   Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  person         TenantPerson?
  company        TenantCompany?
  tenantImage    TenantImage?
  contracts      Contract[]
  payments       Payment[]
  subscriptions  Subscription[]
  activities     TenantActivity[]
  pageVisits     TenantPageVisit[]
  favorites      Favorite[]
  comments       TenantComment[]
  notes          TenantNote[]
  tasks          TenantTask[]
}

model TenantImage {
  tenantId    String  @id(map: "PK_TenantImage") @default(uuid()) @db.Uuid
  data        Bytes?
  contentType String? @db.VarChar(255)
  hash        String? @db.VarChar(64)
  tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TenantPerson {
  tenantId  String   @id(map: "PK_TenantPerson") @default(uuid()) @db.Uuid
  cpf       String   @unique @db.VarChar(11)
  birthDate DateTime
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TenantCompany {
  tenantId String @id(map: "PK_TenantCompany") @default(uuid()) @db.Uuid
  cnpj     String @unique @db.VarChar(14)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TenantActivity {
  id         String     @id(map: "PK_TenantActivity") @default(uuid()) @db.Uuid
  tenantId   String     @db.Uuid
  actionType ActionType
  actorId    String     @db.VarChar(255)
  actorType  ActorType
  metadata   Json?
  occurredAt DateTime   @default(now())
  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([tenantId], map: "IX_TenantActivity_tenantId")
  @@index([occurredAt], map: "IX_TenantActivity_occurredAt")
}

model TenantPageVisit {
  id        String   @id(map: "PK_TenantPageVisit") @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  userId    String?  @db.Uuid
  timestamp DateTime @default(now())
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([tenantId], map: "IX_TenantPageVisit_tenantId")
  @@index([userId], map: "IX_TenantPageVisit_userId")
}

model TenantComment {
  id        String   @id(map: "PK_TenantComment") @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  userId    String   @db.Uuid
  text      String   @db.VarChar(2000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([tenantId], map: "IX_TenantComment_tenantId")
  @@index([userId], map: "IX_TenantComment_userId")
}

model TenantNote {
  id        String   @id(map: "PK_TenantNote") @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  userId    String   @db.Uuid
  text      String?  @db.VarChar(8000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([tenantId], map: "IX_TenantNote_tenantId")
  @@index([userId], map: "IX_TenantNote_userId")
}

model TenantTask {
  id          String           @id(map: "PK_TenantTask") @default(uuid()) @db.Uuid
  tenantId    String           @db.Uuid
  title       String           @db.VarChar(255)
  description String?          @db.VarChar(8000)
  status      TenantTaskStatus @default(OPEN)
  dueDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([tenantId], map: "IX_TenantTask_tenantId")
}
